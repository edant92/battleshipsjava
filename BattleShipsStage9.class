import java.util.Random;
import java.util.Scanner;

public class MainActivity {
	
	static boolean playerTurn; //true = player's turn, false = computer's turn
	static int gameStage; //0 = Place Ships, 1 = Play, 2 = Game Over
	
	static Grid gridUser;
	static Grid gridComputer;
	
	static int numberOfShips;
	static int[] shipLengths;
	
	static int mapWidth;
	static int mapHeight;
	
	static int shootRow;
	static int shootColumn;
	
	static boolean[][] aiSpacesToChooseFrom;
	
    public static void main(String[] args) {
   	
    	playerTurn = true;
    	gameStage = 0;
    	mapWidth = 12;
    	mapHeight = 12;
    	numberOfShips = 7;
    	int lengthOfShips = 2;
    	
    	shipLengths = new int[numberOfShips];
    	shipLengths[0] = 2;
    	shipLengths[1] = 2;
    	shipLengths[2] = 3;
    	shipLengths[3] = 3;
    	shipLengths[4] = 3;
    	shipLengths[5] = 4;
    	shipLengths[6] = 5;
    	
    	//Grid(String gridName, gridWidth, int gridHeight, int[][] gridArray, int numberOfShips, int hitsTillLose)
    	
    	gridUser = new Grid("User", mapWidth, mapHeight, new int[mapWidth][mapHeight], numberOfShips, (lengthOfShips*numberOfShips));
    	gridComputer = new Grid("Computer", mapWidth, mapHeight, new int[mapWidth][mapHeight], numberOfShips, (lengthOfShips*numberOfShips));
    	
    	generateMap(gridUser);
    	generateMap(gridComputer);
    	
    	initialiseComputerAI();
    	
    	drawMap(gridUser);    	
    	
    	while (gameStage == 0) {
    	
    		int shipsToPlacePlayer = numberOfShips;
    		int shipNumber = 1;
    		
    		if (playerTurn) {
        		do {
        			
        			System.out.println("Please place Ship " + shipNumber);
        			
        			userPlaceShip(shipNumber);
        			shipsToPlacePlayer--;
        			shipNumber++;
        			
        		} while (shipsToPlacePlayer > 0);
        		
        		gameStage = 1;
            	System.out.println("**************************************");
            	System.out.println("***********All ships placed***********");
            	System.out.println("**************************************");
    		}
    		
    	}
    	
    	//Generate AI's ships
    	generateComputerAIShips(gridComputer);
    	
    	drawMap(gridUser);
    	
    	while (gameStage == 1) {
		//Game is being played
    		
    		if (playerTurn) {
    			shoot(gridComputer, gridUser);
    			playerTurn = false;
    		} else {
    			
    			computerAITurn();
    			drawMap(gridUser);
    			playerTurn = true;
    		}
        	
    	}  
    	
    		System.out.println("**********************");
        	System.out.println("******GAME OVER!******");
        	System.out.println("**********************");

    }

    public static void generateMap(Grid grid) {
    	//Based on gridWidth and gridHeight of grids, set all places in array to -1 (empty unused)
    	for (int row = 0; row < grid.getGridWidth(); row++) {
    		for (int column = 0; column < grid.getGridHeight(); column++) {
    			grid.getGridArray()[row][column] = -1;
    		}
    	}
    	
    }
    
    public static void initialiseComputerAI() {
    	
    	//Array to store potential row/column choices (these are updated with values from AI shot so AI cannot shoot same space);    	
    	aiSpacesToChooseFrom = new boolean[gridComputer.getGridWidth()][gridComputer.getGridHeight()];
    	
    	for (int row = 0; row < gridComputer.getGridWidth(); row++) {
    		for (int column = 0; column < gridComputer.getGridHeight(); column++) {
    			aiSpacesToChooseFrom[row][column] = false;
    		}
    	}
    	
    }
    
    public static void computerAITurn() {  	
    	
    	int rowRandom;
    	int columnRandom;
    	
    	//Generate randomRow/randomColumn until a free space is found (false) then shoot 
    	do {

    		rowRandom = getRandomInteger(gridComputer.getGridHeight());
    		columnRandom = getRandomInteger(gridComputer.getGridWidth());
    	
    	} while (aiSpacesToChooseFrom[rowRandom][columnRandom] == true);   	

    	aiSpacesToChooseFrom[rowRandom][columnRandom] = true;
    	
    	hit(gridUser, gridComputer, rowRandom, columnRandom);
    	
    }
    
    public static void userPlaceShip(int shipNumber) {
    	
    	System.out.println(gridUser.getGridName() + " please place your ship.");
    	
    	Scanner input = new Scanner(System.in);
    	Ship newShip;
    	
        do {
        	
        	int placeRow;
        	int placeColumn;
        	int orientation;
        	boolean horizontal;
        	
            do {
            	System.out.print(gridUser.getGridName() + " Row: ");
            	placeRow = input.nextInt();
            } while (placeRow > gridUser.getGridWidth() || placeRow < 1);
       
            placeRow--;
            
            do {
                System.out.print(gridUser.getGridName() + " Column: ");
                placeColumn = input.nextInt();
            } while (placeColumn > gridUser.getGridHeight()  || placeColumn < 1);
            
            placeColumn--;
        	
            do {
                System.out.print(gridUser.getGridName() + " Horizontal(0) or Vertical(1): ");
                orientation = input.nextInt();
            } while (orientation > 1  || orientation < 0);
            
 
            if (orientation == 0) {
            	horizontal = true;
            } else {
            	horizontal = false;
            }
            
            
            newShip = new Ship(shipNumber, placeRow, placeColumn, shipLengths[(shipNumber-1)], horizontal, gridUser.getGridName());
            
        } while (!shipSpaceIsFree(newShip, gridUser));
        
        placeShip(newShip, gridUser);        
    
        drawMap(gridUser);
    	
    }
    
    public static void shoot(Grid activeGrid, Grid otherGrid){
        
        System.out.println(otherGrid.getGridName() + "'s Turn:");
        
        Scanner input = new Scanner(System.in);
        
        do {
        	
            do {
            	System.out.print(activeGrid.getGridName() + " Row: ");
            	shootRow = input.nextInt();
            } while (shootRow > activeGrid.getGridWidth() || shootRow < 1);
       
            //Decrement shootRow by one so users input is in line with value in gridArray (i.e. starts from 0)
            shootRow--;
            
            do {
                System.out.print(activeGrid.getGridName() + " Column: ");
                shootColumn = input.nextInt();
            } while (shootColumn > activeGrid.getGridHeight()  || shootColumn < 1);
            
          //Decrement shootColumn by one so users input is in line with value in gridArray (i.e. starts from 0)
            shootColumn--;                
        	
        } while (placeAlreadyHit(activeGrid, shootRow, shootColumn));
        
    	hit(activeGrid, otherGrid, shootRow, shootColumn);
        
    }
    
    public static boolean placeAlreadyHit(Grid grid, int row, int column) {
    	
    	//Checks grid array if place has already hit - if yes, returns true.
    	
		if ((grid.getGridArray()[shootRow][shootColumn] == 1) || (grid.getGridArray()[shootRow][shootColumn] == 2)){
			System.out.println("You've already shot here! Try again.");
			return true;
		} else {
			return false;
		}
    	
    }
    
    public static void hit(Grid activeGrid, Grid otherGrid, int shootRow, int shootcolumn) {
    	
    if (activeGrid.getGridArray()[shootRow][shootColumn] == 0) {
        System.out.println(otherGrid.getGridName() + " aimed for (" + (shootColumn+1) + ", " + (shootRow+1) + ") - they Hit!");
        activeGrid.getGridArray()[shootRow][shootColumn] = 1;
        activeGrid.setHitsTillLose(activeGrid.getHitsTillLose()-1);
    	
    	if (activeGrid.getHitsTillLose() == 0) {
    		gameStage = 2;
    	}
    	
    } else {
    	System.out.println(otherGrid.getGridName() + " aimed for (" + (shootColumn+1) + ", " + (shootRow+1) + ") - they Missed :(!");
    	activeGrid.getGridArray()[shootRow][shootColumn] = 2;
    }
    
    System.out.println("------------");
    	
    }

    public static void generateComputerAIShips(Grid grid) {
    	
    	//Loop through number of ships required for grid.
    	for (int i = 0; i < grid.getNumberOfShips(); i++) {
    		
    		createComputerAIShip(i+1, shipLengths[i], grid);
    		
    	}
    }
    
    public static void createComputerAIShip(int shipId, int shipLength, Grid grid) {
    	
    	Boolean spaceAvailable = false;
    	
    	while (!spaceAvailable) {
    		Ship newShip = newRandomShip(shipId, shipLength, grid);
    		
    		if (shipSpaceIsFree(newShip, grid)) {
    			spaceAvailable = true;
    			placeShip(newShip, grid);
    		}
    		
    	}	
		
    }
    
    public static Ship newRandomShip(int shipId, int shipLength, Grid grid) {
    	//Generate Random ship location object and return it
		int randomStartRow = getRandomInteger(grid.getGridWidth());
		int randomStartColumn = getRandomInteger(grid.getGridHeight());
		
		Random random = new Random();
		Boolean horizontal;
		
		if (random.nextBoolean() == true) {
			horizontal = true;
		} else {
			horizontal = false;
		}
		
		return new Ship(shipId, randomStartRow, randomStartColumn, shipLength, horizontal, grid.getGridName());
    }
    
    public static boolean shipSpaceIsFree(Ship ship, Grid grid){
    	
    	int sRow = ship.getShipOriginRow();
    	int sColumn = ship.getShipOriginColumn();    	
    	
    	if (ship.getShipOrientation()) {
    		//If ship is Horizontal
    		
    		int shipSpacesFree = ship.getShipLength();
    		
    		do {
    		
	    		for (int i = 0; i < ship.getShipLength(); i++) {
	    		
	    			int newColumn = sColumn+i;
	    			
	    			try {
		    			//If space empty
		    			if (grid.getGridArray()[sRow][newColumn] == -1) {
		    				shipSpacesFree--;
		    			} else {
		    				return false;
		    			}	
	    			} catch (IndexOutOfBoundsException e) {
	    				return false;
	    			}
	    			
	    		}
    		
    		} while (shipSpacesFree > 0);
    		
    		return true;
    		
    	} else {
    		//If ship is Vertical
    		
    		int shipSpacesFree = ship.getShipLength();
    		
    		do {
    		
	    		for (int i = 0; i < ship.getShipLength(); i++) {
	    		
	    			int newRow = sRow+i;
	    			
	    			try {
		    			//If space empty
		    			if (grid.getGridArray()[newRow][sColumn] == -1) {
		    				shipSpacesFree--;
		    			} else {
		    				return false;
		    			}
	    			} catch (IndexOutOfBoundsException e) {
	    				return false;
	    			}
	    			
	    		}
    		
    		} while (shipSpacesFree > 0);
    		
    		return true;
    	}
    	
}
    
    public static void placeShip(Ship ship, Grid grid) {
    	
    	int sRow = ship.getShipOriginRow();
    	int sColumn = ship.getShipOriginColumn();
    		
        	if (ship.getShipOrientation()) {
        		//If ship is Horizontal
        		
        		for (int i = 0; i < ship.getShipLength(); i++) {
        		
        			int newColumn = sColumn+i;
        			
        			grid.getGridArray()[sRow][newColumn] = 0;
        			
        		}
        		
        	} else {
        		//If ship is Vertical
        		
        		for (int i = 0; i < ship.getShipLength(); i++) {
            		
        			int newRow = sRow+i;
        			
        			grid.getGridArray()[newRow][sColumn] = 0;
        			//System.out.println("Ship " + shipNumber + " Co-ordinates: " + (sColumn+1) + ", " + (newRow+1));
        		}
        	}
    	
    }
    
    public static void drawMap(Grid grid) {
    	
    	System.out.println("Grid " + grid.getGridName());
    	
    	for (int i=0; i < grid.getGridWidth(); i++) {
    		System.out.print("\t" + (i+1));
    	}
    	
    	System.out.println("");
    	
    	for (int row = 0; row < grid.getGridWidth(); row++) {
    		System.out.print((row+1) + " ");
    		for (int column = 0; column < grid.getGridHeight(); column++) {
    			
    			if (grid.getGridArray()[row][column] == -1) {
    				//Empty space
    				System.out.print("\t"+"~");
    			} else if (grid.getGridArray()[row][column] == 0) {
    				//Ship in space
    				System.out.print("\t"+"S");
    			} else if (grid.getGridArray()[row][column] == 1) {
    				//Space hit and Ship in space
    				System.out.print("\t"+"x");
    			} else if (grid.getGridArray()[row][column] == 2) {
    				//Space hit and Ship not in space
    				System.out.print("\t"+"o");
    			} 
    		}
    		System.out.println();
    	}
    	System.out.println(grid.getGridName() + " has " + grid.getHitsTillLose() + " hits Left.");
    }
    
    public static int getRandomInteger(int maximum){
    	return ((int) (Math.random()*(maximum - 1))) + 1; 
    }
    
}
